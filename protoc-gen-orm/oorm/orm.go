package oorm

import (
	"github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/protoc-gen-gogo/generator"
	"protoc.yyue.dev/protoc-gen-orm/orm"
)

type Orm struct {
	*generator.Generator
}

// Name identifies the plugin.
func (o *Orm) Name() string {
	return "gorm"
}

// Init is called once after data structures are built but before
// code generation begins.
func (o *Orm) Init(g *generator.Generator) {
	o.Generator = g
}

// Generate produces the code generated by the plugin for this file,
// except for the imports, by calling the generator's methods P, In, and Out.
func (o *Orm) Generate(file *generator.FileDescriptor) {

	for _, message := range file.Messages() {
		// We don't want to bother with the MapEntry stuff
		if message.GetOptions().GetMapEntry() {
			continue
		}
		if message.Options != nil {
			v, err := proto.GetExtension(message.Options, orm.E_Opts)
			if err == nil {
				opts, ok := v.(*orm.OrmMessageOptions)
				if ok && opts.GetOrmable() {

				}
			}
		}

	}
}

// GenerateImports produces the import declarations for this file.
// It is called after Generate.
func (o *Orm) GenerateImports(file *generator.FileDescriptor) {
}
